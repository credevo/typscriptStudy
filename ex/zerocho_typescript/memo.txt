##ts => js 변환시 사라지는 코드들
    type
    interface
    any<T>
    function body
        function func(x:any): any
        function func(x){ return any}
    as 를 사용하여 타입을 변경
        let a = '123';
        a = 1004 as unknown as number;
##강제 타입 변환
# as unknown , as number : 강제 타입 변환 하는 형태
# <number><unknown>  이랑 as unknown as number 랑 같은 의미이긴 하지만, react의 jsx 문법에서 지원이 안된다고함.
  되도록 as를 통한 강제 변환을 사용한다.

## non-null : naver 
    const arr = []; // naver[] 이 됨
## non-null : !
    const head = document.querySelector("#header")!;
    head가 Element | null 인데 무조건 null이 아닌경우 !로 명시가능

#typeof : 값을 type으로 쓰고 싶을때, 타입으로 쓰고 싶을때
#keyof : 타입의 key값들을 쓰고 싶을때 
  const obj = { a: '123', b: '456'}
  type Key = keyof typeof obj;

# | (union) : 하나이상만 만족해야 한다.
# & (intersection) : 모든 조건을 만족해야 한다

## interface vs type : 주로 type쓰다가, 객체지향으로 프로그램할때 처럼 확장성이 필요할때 사용

## 타입에 바로 객체리터럴 를 입력하는경우, 잉여 속성 검사를 한다.
: 발생하는 경우 다른 변수에 선언후 그 변수를 사용하면된다.
    interface A { a:string}
    const obj1 : A = {a : 'hello', b:'world'}; // 잉여속성검사로 인해 b속성 에러발생

## void : undefined o, null x
function a() : void {
    return undefined; //(=return; )
}
 
## declare function(arg..) 형태 : 함수의 선언만 쓰고 싶을때 

#any  vs never
#unknown : 지정해야한다

#타입스크립트 타입추론  if/else 해줌

#type 체크 javascript
typeof a === ‘number’
Array.isArray(arr)
obj instanceof A
‘bbb’ in a  객체내에 속성명 존재여부 체크

#in : 객체 속성 찾아닐때
#is : 타입을 구분해주는 커스텀 함수를 만들때 custom_type_guard(=형식 조건자)
  즉, 저왁하게 추론할 수 있도록 지원한다
function pet(a:Cat | Dog) : a is Dog{
  if((a as Cat).meow) { return fasle}
  return ture;
}

#promise tkdxo
  실행중상태: pending > 실행후 결과(fulfill, reject) > 실행후 상태: settled(resolve,reject)

#{ } 와 Object
{ },Object 타입은 (null 와 undefined 제외한) 모든 타입을 말하는 것. 소문자 object랑 다르다.

#readonly : 타입속성을 방지
declare type a :readonly;

#인덱스드 시그니처
type A = {[key:string] : string}
모든 키가 string 타입이고, 값도 string 타입

#맵드 타입스
type B = ‘Human’ | ‘Animal’;
type A = {[key in B] : number};

#class
class A {
  a: number;
  b:string;
  constructor(){
    this.a = 1;
    this.b = ‘hi’;
  }
}
class B {
  a: number = 1;
  b: string = ‘hi’;
  mehtodxxx(){}
}
type AA = A;  // A는 new A()를 나타내며, class는 타입으로 나타낼 수 있다.
type BB : typeof A = A; // 타입 자체를 나타낼 때는 class 앞 typeof로 참조되도록 명시한다.
typeof는 값을 타입으로 참조될수 있게하는 operator 이다.

##private 차이
class A{
  private a : string=‘hi’; // ts에서 제공되는 private이지만, 실제 js에서는 public으로 바뀐다. 내부 ts에서는 private으로 컴파일 가능해지므로, private와 동일하다고 생각
  #b : string = ‘hello’;
}
##class 내에서 typescript 예약어
                  class내부/인스턴스/상속class
private		o / x / x
protected		o / x / o
public (=생략)	o / o / o
readonly

#객체지향 원칙?
추상에 의존하고 구현에 의존하지 말아라 
class A implements AA (){ }
class 는  실제 추상된 개념을 구현한 형태

#optional
function abc(a:number, b?:number, c?:number){ } // 옵셔널 parameter 지정
function def(…args: number[]){ } // 갯수 상관없이 parameter 지정

#generic : 함수 선언시 정의하지 않고, 사용할때 정의되지는 형태일때 씀

# generic 제한 두는 법
정하진 않았지만, string, number 으로 같은 타입으로 제한을 둔다는 의미
function add<T extends string | number>(x:T) :T {
  return x+y;
}
function add<T extends {a:string}>(x:T) : T{};
//add({a:’hello’}); 형태로 사용가능
function add<T extends (…args:any) => any>(x:T) : T { return x};
파라미터가 함수(=callback)일때 함수를 타입으로 가져다 쓸 경우 !!!
//add(()=>’hi’);
function add<T extends abstract new (…args:any)=> any>(x:T) : T { return x};
class A {}
add(A);

#기본값 
  const add1 = <T=unknown>(x:T) : T[] => [x];
  const add2: <T extends string>(x:T) =>T[] = (x)=>[x];
  const add3= <T,>(x:T) : T[] => [x];

#형 강제 변환 방법
<number> 하거나, as 로 

##공변성(convariant), 반공변성(contravariant)
#strictFunctionTypes
리턴타입이 많은쪽으로 대입된다
function a1(x:string) : string | number { }
type b1(x:string) : string { }
let c1 :b1 = a1;

매개변수가 좁은쪽으로 대입된다
function a2(x:string) : number { }
type b2 = (x:string | number) => number;
let c2: b2 = a2;

function a3(x:string | number): number { return 0}
type b3=(x:string) => number | string;
let c3:b3=a3;

##오버로딩
declare function add(x:number, y:number) : number;
declare function add(x:number, y:number, z:number) : number;
// declare function add(x:number, y:number, z?:number) :number;

add(1,2);
add(1,2,3);

interface Add{
  (x:number, y:number) : number;
  (x:string, y:string) : string;
}
const add : Add = (x:any,y:any) => x+y;

class A {
  add(x:number,y:number) : number;
  add(x:string,y:string) : string;
  add(x:any, y:any){ return x+y}
}
const c = new A().add(1,2);    // returnType number
const cc= new A().add(‘1’,’2’); // returnType string

##
interface Axios{
  get() : void;
}
class CustomError extends Error{
	response?: {
		data : any;
	}
}
(async ()=>{
	try {
		await axios.get();
	}catch(err){
		//err as CustomError 사용할수 있지만, 타입스크립트가 건망증..?띠니
		if(err instanceof CustomError){
			console.log(err.response?.data);
		}
	}
})();